# automatically generated by the FlatBuffers compiler, do not modify

# namespace: foraging

import flatbuffers

class Rule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRule(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Rule()
        x.Init(buf, n + offset)
        return x

    # Rule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Rule
    def Preconditions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Precondition import Precondition
            obj = Precondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Rule
    def PreconditionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Rule
    def Behaviors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Behavior import Behavior
            obj = Behavior()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Rule
    def BehaviorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Rule
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Action import Action
            obj = Action()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Rule
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def RuleStart(builder): builder.StartObject(3)
def RuleAddPreconditions(builder, preconditions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(preconditions), 0)
def RuleStartPreconditionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RuleAddBehaviors(builder, behaviors): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(behaviors), 0)
def RuleStartBehaviorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RuleAddActions(builder, actions): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)
def RuleStartActionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RuleEnd(builder): return builder.EndObject()
