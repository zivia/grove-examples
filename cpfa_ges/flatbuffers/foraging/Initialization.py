# automatically generated by the FlatBuffers compiler, do not modify

# namespace: foraging

import flatbuffers

class Initialization(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInitialization(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Initialization()
        x.Init(buf, n + offset)
        return x

    # Initialization
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Initialization
    def Init1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Initialization
    def Init2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Initialization
    def Init3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def InitializationStart(builder): builder.StartObject(3)
def InitializationAddInit1(builder, init1): builder.PrependInt8Slot(0, init1, 0)
def InitializationAddInit2(builder, init2): builder.PrependInt8Slot(1, init2, 0)
def InitializationAddInit3(builder, init3): builder.PrependInt8Slot(2, init3, 0)
def InitializationEnd(builder): return builder.EndObject()
